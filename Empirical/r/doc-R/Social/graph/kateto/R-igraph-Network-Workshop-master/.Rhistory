source('~/Downloads/R-igraph-Network-Workshop-master/NetSciX 2016 Workshop.r', echo=TRUE)
install.packages("igraph")
x <- 3         # Asignación
library(igraph)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
# Examinar los datos
head(nodes)
View(nodes)
View(links)
head(links)
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
nrow(nodes)
length(unique(nodes$id))
nrow(nodes)
# length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
# Colapsar múltiples enlaces del mismo tipo entre dos nodos
# sumando sus pesos, usando aggregate() con "from", "to", "type"
# (no se usa "simplify()" para no colapsar enlaces de diferentes tipos)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
# Colapsar múltiples enlaces del mismo tipo entre dos nodos
# sumando sus pesos, usando aggregate() con "from", "to", "type"
# (no se usa "simplify()" para no colapsar enlaces de diferentes tipos)
links <- aggregate(links[,3], links[,-3], sum)
links
links <- links[order(links$from, links$to),]
links
# Colapsar múltiples enlaces del mismo tipo entre dos nodos
# sumando sus pesos, usando aggregate() con "from", "to", "type"
# (no se usa "simplify()" para no colapsar enlaces de diferentes tipos)
links <- aggregate(links[,3], links[,-3], sum)
links
links <- links[order(links$from, links$to),]
links
colnames(links)[4] <- "weight"
links
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
# Examinar los datos
head(nodes2)
head(links2)
# links2 es una matriz de adyancencia para una red bipartita
links2 <- as.matrix(links2)
dim(links2)
# links2 es una matriz de adyancencia para una red bipartita
links2 <- as.matrix(links2)
# links2 es una matriz de adyancencia para una red bipartita
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
library(igraph)
# La función graph.data.frame function, emplea 2 data frames: 'd' y 'vertices'.
# 'd' describe las aristas de la red - debería comenzar con dos columnas indicando
# los IDs de los nodos source y target de cada aristas
# 'vertices' debería comenzar con la columna de ID.
# El resto de columnas se consideran atributos.
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
# La función graph.data.frame function, emplea 2 data frames: 'd' y 'vertices'.
# 'd' describe las aristas de la red - debería comenzar con dos columnas indicando
# los IDs de los nodos source y target de cada aristas
# 'vertices' debería comenzar con la columna de ID.
# El resto de columnas se consideran atributos.
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# Examinar la red, nodos, aristas y atributos
class(net)
net
E(net)
V(net)
E(net)$type
V(net)$media
plot(net, edge.arrow.size=.4,vertex.label=NA)
# Eliminar bucles
net <- simplify(net, remove.multiple = F, remove.loops = T)
# La red se puede convertir a una lista de aristas o a una matriz de adyacencia
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
head(nodes2)
head(links2)
net2 <- graph_from_incidence_matrix(links2)
# Conteo de los valores del atributo 'type' en los nodos
table(V(net2)$type)
plot(net2,vertex.label=NA)
# También se pueden generar proyecciones bipartitas
# (los co-miembros se calculan multiplicando la matriz por su transpuesta)
net2.bp <- bipartite.projection(net2)
# También se pueden calcular las proyecciones manualmente
#   as_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2))
# t(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2)
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=1,
vertex.label=nodes2$media[!is.na(nodes2$media.type)])
# También se pueden calcular las proyecciones manualmente
#   as_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2))
# t(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2)
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=3,
vertex.label=nodes2$media[!is.na(nodes2$media.type)])
# También se pueden calcular las proyecciones manualmente
#   as_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2))
# t(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2)
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=6,
vertex.label=nodes2$media[!is.na(nodes2$media.type)])
# También se pueden calcular las proyecciones manualmente
#   as_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2))
# t(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2)
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=16,
vertex.label=nodes2$media[!is.na(nodes2$media.type)])
plot(net2.bp$proj2, vertex.label.color="black", vertex.label.dist=1,
vertex.label=nodes2$media[ is.na(nodes2$media.type)])
# También se pueden calcular las proyecciones manualmente
as_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2))
t(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2)
# Empiezan con 'vertex.', 'edge.'. Lista completa en:
?igraph.plotting
# Las opciones también pueden añadirse la objeto
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
V(net)$size <- V(net)$audience.size*0.7
V(net)$label.color <- "black"
V(net)$label <- NA # sin etiqueta
E(net)$width <- E(net)$weight/6
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
plot(net)
# Las especificadas en plot sobreescriben a las del objeto
plot(net, edge.color="orange", vertex.color="gray50")
# También se pueden añadir leyendas
plot(net)
legend(x=-1.1, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2.5, bty="n", ncol=1)
# En algunas redes (e.g. semánticas) sólo se muestran las etiquetas a los nodos
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
plot(net2, vertex.shape="none", vertex.label=nodes2$media,
vertex.label.color=V(net2)$color, vertex.label.font=2.5,
vertex.label.cex=.6, edge.color="gray70", edge.width=2)
# Densidad
edge_density(net, loops=F)
library(igraph)
# La función graph.data.frame function, emplea 2 data frames: 'd' y 'vertices'.
# 'd' describe las aristas de la red - debería comenzar con dos columnas indicando
# los IDs de los nodos source y target de cada aristas
# 'vertices' debería comenzar con la columna de ID.
# El resto de columnas se consideran atributos.
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
library(igraph)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
net2 <- graph_from_incidence_matrix(links2)
net2 <- simplify(net2, remove.multiple = F, remove.loops = T)
# Densidad
edge_density(net, loops=F)
ecount(net)/(vcount(net)*(vcount(net)-1)) # red dirigida
# Reciprocidad
reciprocity(net)
dyad_census(net) # Mutuos, no mutuos y nulos
2*dyad_census(net)$mut/ecount(net)
# Diámetro (por defecto se consideran los pesos)
diameter(net, directed=F, weights=NA)
diameter(net, directed=F)
diam <- get_diameter(net, directed=T)
diam
as.vector(diam)
# Colorear nodos del diámetro
vcol <- rep("gray40", vcount(net))
vcol[diam] <- "gold"
ecol <- rep("gray80", ecount(net))
ecol[E(net, path=diam)] <- "orange"
plot(net, vertex.color=vcol, edge.color=ecol, edge.arrow.mode=0)
# Grado ('in','out','all','total')
deg <- degree(net, mode="all")
plot(net, vertex.size=deg*3)
hist(deg, breaks=1:vcount(net)-1, main="Histograma del grado")
# Degree distribution
deg.dist <- degree_distribution(net, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="CDF")
# Centralidad de grado
degree(net, mode="in")
centr_degree(net, mode="in", normalized=T)
# Closeness
closeness(net, mode="all", weights=NA)
centr_clo(net, mode="all", normalized=T)
# Eigenvector
eigen_centrality(net, directed=T, weights=NA)
centr_eigen(net, directed=T, normalized=T)
# Betweenness
betweenness(net, directed=T, weights=NA)
edge_betweenness(net, directed=T, weights=NA)
centr_betw(net, directed=T, normalized=T)
-----------------------------------
# * TAREA
# Calcular degree, closeness, eigenvector, and betweenness centrality de los
# actors en la Zachary karate club network. Mostrar la red, usando tamaños
# de nodo basados en las diferentes métricas de centralidad.
-----------------------------------
# HITS: Hubs y authorities
hs <- hub_score(net, weights=NA)$vector
-----------------------------------
# * TAREA
# Calcular degree, closeness, eigenvector, and betweenness centrality de los
# actors en la Zachary karate club network. Mostrar la red, usando tamaños
# de nodo basados en las diferentes métricas de centralidad.
-----------------------------------
# HITS: Hubs y authorities
hs <- hub_score(net, weights=NA)$vector
# Densidad
edge_density(net, loops=F)
# Densidad
?edge_density(net, loops=F)
# Densidad
edge_density(net, loops=F)
ecount(net)/(vcount(net)*(vcount(net)-1)) # red dirigida
ecount(net)
E(net)
length(E(net))
# Densidad
edge_density(net, loops=F)
ecount(net)/(vcount(net)*(vcount(net)-1)) # red dirigida
# Reciprocidad
reciprocity(net)
# Reciprocidad
reciprocity(net)
dyad_census(net) # Mutuos, no mutuos y nulos
# Reciprocidad
?reciprocity(net)
library(igraph)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
net2 <- graph_from_incidence_matrix(links2)
net2 <- simplify(net2, remove.multiple = F, remove.loops = T)
# Densidad
edge_density(net, loops=F)
ecount(net)/(vcount(net)*(vcount(net)-1)) # red dirigida
# Reciprocidad
?reciprocity(net)
# Reciprocidad
reciprocity(net)
dyad_census(net) # Mutuos, no mutuos y nulos
2*dyad_census(net)$mut/ecount(net)
# Diámetro (por defecto se consideran los pesos)
diameter(net, directed=F, weights=NA)
diameter(net, directed=F)
diam <- get_diameter(net, directed=T)
diam
as.vector(diam)
# Colorear nodos del diámetro
vcol <- rep("gray40", vcount(net))
vcol[diam] <- "gold"
ecol <- rep("gray80", ecount(net))
ecol[E(net, path=diam)] <- "orange"
plot(net, vertex.color=vcol, edge.color=ecol, edge.arrow.mode=0)
library("animation")
library("igraph")
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
net2 <- graph_from_incidence_matrix(links2)
net2 <- simplify(net2, remove.multiple = F, remove.loops = T)
ani.options("convert") # Check that the package knows where to find ImageMagick
# If it doesn't know where to find it, give it the correct path for your system.
ani.options(convert="convert")
l <- layout_with_lgl(net)
saveGIF( {  col <- rep("grey40", vcount(net))
plot(net, vertex.color=col, layout=l)
step.1 <- V(net)[media=="Wall Street Journal"]
col[step.1] <- "#ff5100"
plot(net, vertex.color=col, layout=l)
step.2 <- unlist(neighborhood(net, 1, step.1, mode="out"))
col[setdiff(step.2, step.1)] <- "#ff9d00"
plot(net, vertex.color=col, layout=l)
step.3 <- unlist(neighborhood(net, 2, step.1, mode="out"))
col[setdiff(step.3, step.2)] <- "#FFDD1F"
plot(net, vertex.color=col, layout=l)  },
interval = .8, movie.name="network_animation.gif" )
detach("package:igraph")
detach("package:animation")
data(short.stergm.sim)
data(short.stergm.sim)
short.stergm.sim
head(as.data.frame(short.stergm.sim))
require(ergm)
install.packages("ergm")
library("animation")
library("igraph")
library("network")
library("sna")
library("visNetwork")
library("threejs")
library("networkD3")
library("ndtv")
library("ergm")
data(short.stergm.sim)
short.stergm.sim
head(as.data.frame(short.stergm.sim))
render.d3movie(net3.dyn, usearrows = F,
displaylabels = F, label=net3 %v% "media",
bg="#ffffff", vertex.border="#333333",
vertex.cex = degree(net3)/2,
vertex.col = net3.dyn %v% "col",
edge.lwd = (net3.dyn %e% "weight")/3,
edge.col = '#55555599',
vertex.tooltip = paste("<b>Name:</b>", (net3.dyn %v% "media") , "<br>",
"<b>Type:</b>", (net3.dyn %v% "type.label")),
edge.tooltip = paste("<b>Edge type:</b>", (net3.dyn %e% "type"), "<br>",
"<b>Edge weight:</b>", (net3.dyn %e% "weight" ) ),
launchBrowser=T, filename="Media-Network-Dynamic.html",
render.par=list(tween.frames = 30, show.time = F),
plot.par=list(mar=c(0,0,0,0)), output.mode='inline' )
